# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2023-10-24T11:55:44+00:00

from __future__ import annotations

import os
from typing import List, Optional

from pydantic import BaseModel, Field


class CommercialModel(BaseModel):
    commercialReference: Optional[str] = ""
    deviceImageId: Optional[str] = ""


class Driver(BaseModel):
    driverId: Optional[str] = ""
    driverType: Optional[str] = None
    commercialRange: Optional[str] = None
    noOfModels: Optional[int] = None
    deviceFamily: Optional[str] = None
    otherDeviceFamily: Optional[str] = ""
    commercialModels: Optional[List[CommercialModel]] = None


class Category(BaseModel):
    id: Optional[str] = ""
    name: Optional[str] = None
    settings: Optional[List[dict]] = []


class Alarm(BaseModel):
    id: Optional[str] = ""
    name: Optional[str] = None
    settings: Optional[List[dict]] = []


class Value(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class Range(BaseModel):
    min: Optional[int] = 1
    max: Optional[int] = 65535
    stepValue: Optional[int] = 1
    isNoneApplicable: Optional[bool] = False


class FieldValidation(BaseModel):
    minLength: Optional[int] = None
    maxLength: Optional[int] = None
    regularExpression: Optional[str] = None


class Setting(BaseModel):
    id: Optional[str] = ""
    name: Optional[str] = ""
    inputType: Optional[str] = ""
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None

    shortname: Optional[str] = ""
    parametername: Optional[str] = ""
    addreport: Optional[bool] = True
    edit: Optional[bool] = True
    helpTextSelect: Optional[bool] = False


class MainIncomer(BaseModel):
    id: Optional[str] = "pdmShortNameID-IsIncomer"
    name: Optional[str] = "Main/incomer"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = [{"key": "True", "value": "ON"}, {"key": "False", "value": "OFF"}]
    defaultValue: Optional[str] = "False"
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class ReferenceOfBreaker(BaseModel):
    id: Optional[str] = "LPHD1_ProductCode"
    name: Optional[str] = "Reference of breaker"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class RatedCurrent(BaseModel):
    id: Optional[str] = "LPHD1_ARtg"
    name: Optional[str] = "Rate current"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class RatedVoltage(BaseModel):
    id: Optional[str] = "pdmShortNameID-RatedVoltage"
    name: Optional[str] = "Rate voltage"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class LoadName(BaseModel):
    id: Optional[str] = "pdmShortNameID-Loadname"
    name: Optional[str] = "Load name"
    inputType: Optional[str] = "Text"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "Name of the load applied on the single line diagram (HVAC Motor, Strip Lighting, IT closet,...)."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = {
        "minLength": 1,
        "maxLength": 65535,
        "regularExpression": ""
    }
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    shortname: Optional[str] = ""
    parametername: Optional[str] = ""
    addreport: Optional[bool] = True
    edit: Optional[bool] = True
    helpTextSelect: Optional[bool] = False


class LoadZone(BaseModel):
    id: Optional[str] = "pdmShortNameID-Zone"
    name: Optional[str] = "Load zone"
    inputType: Optional[str] = "Text"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[
        str] = "Name a zone to subdivide a building. It is used to tag and aggregate all consumptions which are related to a zone in the building: floor 1; floor 2..."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = {
        "minLength": 1,
        "maxLength": 65535,
        "regularExpression": ""
    }
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    shortname: Optional[str] = ""
    parametername: Optional[str] = ""
    addreport: Optional[bool] = True
    edit: Optional[bool] = True
    helpTextSelect: Optional[bool] = False


class LoadWorks(BaseModel):
    id: Optional[str] = "OpTimeLoadPStrVal"
    name: Optional[str] = "Load works when power greater than (W)"
    inputType: Optional[str] = "Scale"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = None
    helpText: Optional[
        str] = "The load operating time counter increments only when the power is greater or equal to the set value. You can set the value between 10W and 15000W."
    range: Optional[Range] = {
        "min": 10,
        "max": 15000,
        "stepValue": 1,
        "isNoneApplicable": False
    }
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class AssociatedBreakerLabel(BaseModel):
    id: Optional[str] = "LPHD1_CircuitID"
    name: Optional[str] = "Associated breaker label"
    inputType: Optional[str] = "Text"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[
        str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = {
        "minLength": 0,
        "maxLength": 5,
        "regularExpression": ""
    }
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    shortname: Optional[str] = ""
    parametername: Optional[str] = ""
    addreport: Optional[bool] = True
    edit: Optional[bool] = True
    helpTextSelect: Optional[bool] = False


class MountingPosition(BaseModel):
    id: Optional[str] = "LPHD1_InstallationFromBrk"
    name: Optional[str] = "Mounting position"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = "BOTTOM"
    helpText: Optional[
        str] = "Top : The sensor is mounted on the Top/Line of the protective device (circuit breaker or switch) Bottom : The sensor is mounted on the Bottom / Load of the protective device(circuit breaker or switch)."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class TripCurveType(BaseModel):
    id: Optional[str] = "pdmShortNameID-TripCurve"
    name: Optional[str] = "Trip curve type"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = [{"key": "B", "value": "B"}, {"key": "C", "value": "C"}]
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class Usage(BaseModel):
    id: Optional[str] = "LPHD1_Usage"
    name: Optional[str] = "Usage"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = [{"key": "Lighting", "value": "Lighting"}]
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "Select load usage type. It is used to tag and aggregate all consumptions related to an usage for energy analysis: lighting, HVAC..."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class PowerSupply(BaseModel):
    id: Optional[str] = "LPHD1_PowSupCfg"
    name: Optional[str] = "Power supply"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = ""
    helpText: Optional[
        str] = "Top : The current flow is coming from the top / line power terminals of the protective device Bottom : The current flow is coming from the bottom / load power terminals of the protective device."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class PhaseSequence(BaseModel):
    id: Optional[str] = "LPHD1_PhsRot"
    name: Optional[str] = "Phase sequence"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = []
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "For this device, you can select the phase on which the device is wired."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class PowerFactorSign(BaseModel):
    id: Optional[str] = "pdmShortNameID-PowerFactorSign"
    name: Optional[str] = "PF sign convention"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = [
        {
            "key": "IEC",
            "value": "IEC"
        },
        {
            "key": "IEEE",
            "value": "IEEE"
        }
    ]
    defaultValue: Optional[str] = "IEC"
    helpText: Optional[
        str] = "IEC: PF sign indicates if active power is delivered (+) or received (-). PF takes the same sign as Active power P. default value. IEEE: PF sign indicates if the installation is lagging (-) or leading(+). Commonly used in North America."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class SystemType(BaseModel):
    id: Optional[str] = "pdmShortNameID-SystemType"
    name: Optional[str] = "System type"
    inputType: Optional[str] = "Options"
    values: Optional[List[Value]] = [
        {
            "key": "false",
            "value": "3PH3W"
        },
        {
            "key": "true",
            "value": "3PH4W"
        }
    ]
    defaultValue: Optional[str] = "3PH3W"
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class DeviceLabel(BaseModel):
    id: Optional[str] = "LPHD1_UserAppliName"
    name: Optional[str] = "Device label"
    inputType: Optional[str] = "Text"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "Alphanumerical value assigned to the device on the single line diagram."
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = {
        "minLength": 0,
        "maxLength": 5,
        "regularExpression": ""
    }
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    shortname: Optional[str] = ""
    parametername: Optional[str] = ""
    addreport: Optional[bool] = True
    edit: Optional[bool] = True
    helpTextSelect: Optional[bool] = False


class DeviceName(BaseModel):
    id: Optional[str] = "pdmShortNameID-AssetName"
    name: Optional[str] = "Asset name"
    inputType: Optional[str] = "Text"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = None
    fieldValidation: Optional[FieldValidation] = {
        "minLength": 1,
        "maxLength": 32,
        "regularExpression": ""
    }
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    shortname: Optional[str] = ""
    parametername: Optional[str] = ""
    addreport: Optional[bool] = True
    edit: Optional[bool] = True
    helpTextSelect: Optional[bool] = False


class ModbusAddress(BaseModel):
    id: Optional[str] = "MBSL_LCCH1_Address"
    name: Optional[str] = "Modbus address"
    inputType: Optional[str] = "Scale"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = ""
    range: Optional[Range] = {
        "min": 1,
        "max": 247,
        "stepValue": 1,
        "isNoneApplicable": False
    }
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = ""
    scaleFactor: Optional[int] = None
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None


class AlarmOverloadThreshold(BaseModel):
    id: Optional[str] = "CALH1_IOverloadAlm"
    name: Optional[str] = "Overload threshold"
    inputType: Optional[str] = "Scale"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "Overload threshold indicates the current value above which a notification is sent, in % of the nominal value."
    range: Optional[Range] = {
        "min": 0,
        "max": 100,
        "stepValue": 5,
        "isNoneApplicable": False
    }
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = "%"
    scaleFactor: Optional[int] = 100
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    logicalMapping: Optional[List[str]] = None


class AlarmOverVoltage(BaseModel):
    id: Optional[str] = "CALH1_OverVAlm"
    name: Optional[str] = "Over voltage"
    inputType: Optional[str] = "Scale"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "Over voltage indicates the voltage value above which a notification is sent, in % of the nominal value."
    range: Optional[Range] = {
        "min": 100,
        "max": 120,
        "stepValue": 1,
        "isNoneApplicable": False
    }
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = "%"
    scaleFactor: Optional[None] = 100
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    logicalMapping: Optional[List[str]] = None


class AlarmEarthLeakage(BaseModel):
    id: Optional[str] = "CALH1_AEFAlm"
    name: Optional[str] = "Earth leakage tripping threshold"
    inputType: Optional[str] = "Scale"
    values: Optional[List[Value]] = None
    defaultValue: Optional[str] = ""
    helpText: Optional[str] = "E.L. tripping threshold indicates the E.L. current value above which a notification is sent, in % of the nominal value."
    range: Optional[Range] = {
        "min": 30,
        "max": 100,
        "stepValue": 5,
        "isNoneApplicable": False
    }
    fieldValidation: Optional[FieldValidation] = None
    unitSymbol: Optional[str] = "%"
    scaleFactor: Optional[None] = 100
    isMandatory: Optional[bool] = False
    isReadOnly: Optional[bool] = False
    dependencyConfig: Optional[None] = None
    logicalMapping: Optional[List[str]] = None

# from SelfPortal.Models.MetadataModel import *

# Create instances of each class
# value_instance = Value(key="test_key", value="test_value")
# range_instance = Range(min=1, max=10)
# field_validation_instance = FieldValidation(minLength=1, maxLength=10)
# main_incomer_instance = MainIncomer(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
#
# # Convert instances to dictionaries and append them to a list
# instances_list = [value_instance.dict(), range_instance.dict(), field_validation_instance.dict(), main_incomer_instance.dict()]
#
# # Assign the list to another variable
# another_variable = instances_list
#
# # Print the variable to check the result
# print(another_variable)

# # test all te above classes with sample data
# value_instance = Value(key="test_key", value="test_value")
# range_instance = Range(min=1, max=10)
# field_validation_instance = FieldValidation(minLength=1, maxLength=10)
# main_incomer_instance = MainIncomer(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# reference_of_breaker_instance = ReferenceOfBreaker(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# rated_current_instance = RatedCurrent(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# rated_voltage_instance = RatedVoltage(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# load_name_instance = LoadName(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# load_zone_instance = LoadZone(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# load_works_instance = LoadWorks(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# associated_breaker_label_instance = AssociatedBreakerLabel(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# mounting_position_instance = MountingPosition(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# trip_curve_type_instance = TripCurveType(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# usage_instance = Usage(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# power_supply_instance = PowerSupply(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# phase_sequence_instance = PhaseSequence(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# power_factor_sign_instance = PowerFactorSign(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# system_type_instance = SystemType(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# device_label_instance = DeviceLabel(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# device_name_instance = DeviceName(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# modbus_address_instance = ModbusAddress(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# alarm_overload_threshold_instance = AlarmOverloadThreshold(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# alarm_over_voltage_threshold_instance = AlarmOverVoltageThreshold(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
# alarm_earth_leakage_instance = AlarmEarthLeakage(id="test_id", name="test_name", inputType="test_type", values=[value_instance.dict()], defaultValue="test_default", helpText="test_help", range=range_instance.dict(), fieldValidation=field_validation_instance.dict(), unitSymbol="test_unit", scaleFactor=None, isMandatory=False, isReadOnly=False, dependencyConfig=None)
#
# # Convert instances to dictionaries and append them to a list
# instances_list = [value_instance.dict(), range_instance.dict(), field_validation_instance.dict(), main_incomer_instance.dict(), reference_of_breaker_instance.dict(), rated_current_instance.dict(), rated_voltage_instance.dict(), load_name_instance.dict(), load_zone_instance.dict(), load_works_instance.dict(), associated_breaker_label_instance.dict(), mounting_position_instance.dict(), trip_curve_type_instance.dict(), usage_instance.dict(), power_supply_instance.dict(), phase_sequence_instance.dict(), power_factor_sign_instance.dict(), system_type_instance.dict(), device_label_instance.dict(), device_name_instance.dict(), modbus_address_instance.dict(), alarm_overload_threshold_instance.dict(), alarm_over_voltage_threshold_instance.dict(), alarm_earth_leakage_instance.dict()]
#
# # Assign the list to another variable
# another_variable = instances_list
#
# # Print the variable to check the result
# print(another_variable)
