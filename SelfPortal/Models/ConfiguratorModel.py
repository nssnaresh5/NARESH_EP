# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2023-10-24T12:18:16+00:00

from __future__ import annotations
from enum import Enum
from dataclasses import dataclass

import os
from typing import List, Optional, Dict, Any

from pydantic import BaseModel


class ParamType(str, Enum):
    NoneType = "None"
    FromClientApp = "FromClientApp"
    PathRef = "PathRef"
    Direct = "Direct"


class RefType(str, Enum):
    # NoneType: "NoneType"
    ListWithCondition = "ListWithCondition"
    ListWithConditionOnResponse = "ListWithConditionOnResponse"
    Direct = "Direct"
    PreviousResponse = "PreviousResponse"
    Static = "Static"


class RequestType(str, Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"


class ConditionOperator(str, Enum):
    Equals = "Equals"
    NotEquals = "NotEquals"


class Condition(BaseModel):
    propertyName: Optional[str] = None
    operator: Optional[ConditionOperator] = None
    value: Optional[str] = None


#
#
class Params(BaseModel):
    paramName: Optional[str] = None
    paramsType: Optional[ParamType] = None
    refType: Optional[str] = None
    rank: Optional[int] = None
    path: Optional[str] = None
    conditions: Optional[List[Condition]] = None


#
#
# class Port(BaseModel):
#     type: # Optional[str] = None
#
#
# class Response(BaseModel):
#     field_id: Optional[str] = Field(None, alias='_id')
#     type: # Optional[str] = None
#     port: Optional[Port] = None


class Services(BaseModel):
    globalVariable: Optional[str] = None
    reqType: Optional[RequestType] = None
    serviceUrl: Optional[str] = None
    rank: Optional[int] = None
    params: Optional[List[Params]] = None
    preConditions: Optional[List[Params]] = None
    response: Optional[Dict] = None
    requestBody: Optional[Any] = None
    value: Optional[Any] = None

    """
    globalVariable: Any = None
    reqType: RequestType
    serviceUrl: str
    rank: int
    params: List[Params]
    preConditions: Optional[List[Params]] = None
    response: Any = None
    requestBody: Any = None
    value: Any = None
    """


#
#
class CommonDeviceAttributes(BaseModel):
    id: Optional[str] = None
    globalVariables: Optional[List[str]] = None
    services: Optional[List[Services]] = None


#
#
# class Param1(BaseModel):
#     paramName: Optional[str] = None
#     paramsType: Optional[str] = None
#     refType: Optional[str] = None
#     rank: Optional[int] = None
#     path: Optional[str] = None
#     conditions: Optional[List] = None


# class Device(BaseModel):
#     field_id: Optional[str] = Field(None, alias='_id')
#     commercialReference: Optional[str] = None
#     address: Optional[str] = None
#
#
# class Name(BaseModel):
#     field_id: Optional[str] = Field(None, alias='_id')


# class Label(Name):
#     pass
#
#
# class HasMetadata(BaseModel):
#     name: Optional[Name] = None
#     label: Optional[Label] = None
#
#
# class HasMeasurement(BaseModel):
#     field_id: Optional[str] = Field(None, alias='_id')
#     pdmShortNameId: Optional[str] = None
#
#
# class HasAlarm(HasMeasurement):
#     pass


# class HasEvent(HasMeasurement):
#     pass


# class HasControl(HasMeasurement):
#     pass


# class BelongsToDevice(Name):
#     pass


# class FieldLinks(BaseModel):
#     hasMetadata: Optional[HasMetadata] = None
#     hasMeasurements: Optional[List[HasMeasurement]] = None
#     hasAlarms: Optional[List[HasAlarm]] = None
#     hasEvents: Optional[List[HasEvent]] = None
#     hasControls: Optional[List[HasControl]] = None
#     belongsToDevice: Optional[BelongsToDevice] = None


# class CommissioningHint(Name):
#     pass


# class IdentifyTimer(Name):
#     pass


# class HasMetadata1(BaseModel):
#     commissioningHint: Optional[CommissioningHint] = None
#     identifyTimer: Optional[IdentifyTimer] = None


# class HasNode(Name):
#     pass


# class HasUpstreamNetworking(Name):
#     pass


# class HasUpstreamNetworkingSettingGroup(Name):
#     pass


# class HasDateTime(Name):
#     pass


# class FieldLinks1(BaseModel):
#     hasMetadata: Optional[HasMetadata1] = None
#     hasNodes: Optional[List[HasNode]] = None
#     hasUpstreamNetworking: Optional[HasUpstreamNetworking] = None
#     hasUpstreamNetworkingSettingGroup: Optional[
#         HasUpstreamNetworkingSettingGroup
#     ] = None
#     hasDateTime: Optional[HasDateTime] = None


# class Communication(BaseModel):
#     pdmIdentifier: Optional[str] = None
#     vendorUrl: Optional[str] = None
#     isRoot: Optional[str] = None
#     isOn: Optional[str] = None
#     healthState: Optional[str] = None
#     commissioningHint: Optional[str] = None
#     identifyTimer: Optional[str] = None
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks1] = Field(None, alias='_links')


# class Brand(Name):
#     pass


# class CommercialReference(Name):
#     pass


# class SerialNumber(Name):
#     pass


# class Range(Name):
#     pass


# class Model1(Name):
#     pass


# class Family(Name):
#     pass


# class HasMetadata2(BaseModel):
#     brand: Optional[Brand] = None
#     commercialReference: Optional[CommercialReference] = None
#     serialNumber: Optional[SerialNumber] = None
#     range: Optional[Range] = None
#     model: Optional[Model1] = None
#     family: Optional[Family] = None


# class FieldLinks2(BaseModel):
#     hasMetadata: Optional[HasMetadata2] = None


# class Identification(BaseModel):
#     brand: Optional[str] = None
#     commercialReference: Optional[str] = None
#     serialNumber: Optional[str] = None
#     range: Optional[str] = None
#     model: Optional[str] = None
#     family: Optional[str] = None
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks2] = Field(None, alias='_links')


# class HasDataPoint(Name):
#     pass


# class FieldLinks3(BaseModel):
#     hasDataPoints: Optional[List[HasDataPoint]] = None


# class Sensor(BaseModel):
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks3] = Field(None, alias='_links')


# class Firmware(BaseModel):
#     version: Optional[str] = None
#     updateProtocol: Optional[str] = None
#     mode: Optional[str] = None
#     quality: Optional[str] = None


# class Hardware(BaseModel):
#     version: Optional[str] = None
#     type: # Optional[str] = None
#     quality: Optional[str] = None


# class Backup(BaseModel):
#     name: Optional[str] = None
#     createdAt: Optional[str] = None
#     restoredAt: Optional[str] = None
#     quality: Optional[str] = None


# class LPHD1InstallationFromBrk(Name):
#     pass


# class Slot1Phase(Name):
#     pass


# class Slot2Phase(Name):
#     pass


# class Slot3Phase(Name):
#     pass


# class Slot4Phase(Name):
#     pass


# class NeutralVT(Name):
#     pass


# class PowerFactorSign(Name):
#     pass


# class Type(Name):
#     pass


# class IsIncomer(Name):
#     pass


# class RatedCurrent(Name):
#     pass


# class RatedVoltage(Name):
#     pass


# class TripCurveType(Name):
#     pass


# class HasMetadata3(BaseModel):
#     slot1Phase: Optional[Slot1Phase] = None
#     slot2Phase: Optional[Slot2Phase] = None
#     slot3Phase: Optional[Slot3Phase] = None
#     slot4Phase: Optional[Slot4Phase] = None
#     neutralVT: Optional[NeutralVT] = None
#     powerFactorSign: Optional[PowerFactorSign] = None
#     type: # Optional[Type] = None
#     isIncomer: Optional[IsIncomer] = None
#     ratedCurrent: Optional[RatedCurrent] = None
#     ratedVoltage: Optional[RatedVoltage] = None
#     tripCurveType: Optional[TripCurveType] = None


# class HasUpstreamDataPoint(Name):
#     pass


# class HasDownstreamDataPoint(Name):
#     pass


# class FieldLinks4(BaseModel):
#     LPHD1_InstallationFromBrk: Optional[LPHD1InstallationFromBrk] = None
#     hasMetadata: Optional[HasMetadata3] = None
#     hasUpstreamDataPoint: Optional[HasUpstreamDataPoint] = None
#     hasDownstreamDataPoint: Optional[HasDownstreamDataPoint] = None


# class Zone(Name):
#     pass


# class WorksWhenPowerGreaterThan(Name):
#     pass


# class HasMetadata4(BaseModel):
#     name: Optional[Name] = None
#     zone: Optional[Zone] = None
#     worksWhenPowerGreaterThan: Optional[WorksWhenPowerGreaterThan] = None


# class FieldLinks5(BaseModel):
#     hasMetadata: Optional[HasMetadata4] = None


# class Load(BaseModel):
#     name: Optional[str] = None
#     zone: Optional[str] = None
#     worksWhenPowerGreaterThan: Optional[str] = None
#     field_links: Optional[FieldLinks5] = Field(None, alias='_links')


# class Electrical(BaseModel):
#     type: # Optional[str] = None
#     isIncomer: Optional[str] = None
#     ratedCurrent: Optional[str] = None
#     ratedVoltage: Optional[str] = None
#     tripCurveType: Optional[str] = None
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks4] = Field(None, alias='_links')
#     load: Optional[Load] = None
#     slot1Phase: Optional[str] = None
#     slot2Phase: Optional[str] = None
#     slot3Phase: Optional[str] = None
#     slot4Phase: Optional[str] = None
#     neutralVT: Optional[str] = None
#     powerFactorSign: Optional[str] = None
#     operationCounter: Optional[str] = None


# class HasMetadata5(BaseModel):
#     name: Optional[Name] = None


# class FieldLinks6(BaseModel):
#     hasMetadata: Optional[HasMetadata5] = None


# class Panel(BaseModel):
#     name: Optional[str] = None
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks6] = Field(None, alias='_links')


# class HasSchedule(Name):
#     pass


# class DigitalInput(Name):
#     pass


# class Controls(Name):
#     pass


# class State(Name):
#     pass


# class DigitalInputMode(Name):
#     pass


# class HasMetadata6(BaseModel):
#     state: Optional[State] = None
#     digitalInputMode: Optional[DigitalInputMode] = None


# class FieldLinks7(BaseModel):
#     hasSchedules: Optional[List[HasSchedule]] = None
#     digitalInput: Optional[DigitalInput] = None
#     controls: Optional[Controls] = None
#     hasMetadata: Optional[HasMetadata6] = None


# class Scheduling(BaseModel):
#     state: Optional[str] = None
#     digitalInputMode: Optional[str] = None
#     quality: Optional[str] = None
#     healthState: Optional[str] = None
#     field_links: Optional[FieldLinks7] = Field(None, alias='_links')


# class Latitude(Name):
#     pass


# class Longitude(Name):
#     pass


# class HasMetadata7(BaseModel):
#     latitude: Optional[Latitude] = None
#     longitude: Optional[Longitude] = None


# class FieldLinks8(BaseModel):
#     hasMetadata: Optional[HasMetadata7] = None


# class Location(BaseModel):
#     latitude: Optional[str] = None
#     longitude: Optional[str] = None
#     field_links: Optional[FieldLinks8] = Field(None, alias='_links')


# class Usage(BaseModel):
#     field_id: Optional[str] = Field(None, alias='_id')
#     name: Optional[str] = None


# class IsPartOfNetwork(Name):
#     pass


# class Transmits(Name):
#     pass


# class Derives(Name):
#     pass


# class Rank(Name):
#     pass


# class Address(Name):
#     pass


# class HasMetadata8(BaseModel):
#     rank: Optional[Rank] = None
#     address: Optional[Address] = None


# class FieldLinks9(BaseModel):
#     belongsToDevice: Optional[BelongsToDevice] = None
#     isPartOfNetwork: Optional[IsPartOfNetwork] = None
#     transmits: Optional[Transmits] = None
#     derives: Optional[Derives] = None
#     hasMetadata: Optional[HasMetadata8] = None


# class Timeout(Name):
#     pass


# class IsSerialLinePolarized(Name):
#     pass


# class HasTerminatorResistance(Name):
#     pass


# class HasMetadata9(BaseModel):
#     timeout: Optional[Timeout] = None
#     isSerialLinePolarized: Optional[IsSerialLinePolarized] = None
#     hasTerminatorResistance: Optional[HasTerminatorResistance] = None


# class FieldLinks10(BaseModel):
#     hasMetadata: Optional[HasMetadata9] = None


# class ModbusSerialLine(BaseModel):
#     timeout: Optional[str] = None
#     isSerialLinePolarized: Optional[str] = None
#     hasTerminatorResistance: Optional[str] = None
#     field_links: Optional[FieldLinks10] = Field(None, alias='_links')


# class ConnectionTimeout(Name):
#     pass


# class MessageTimeout(Name):
#     pass


# class HasMetadata10(BaseModel):
#     connectionTimeout: Optional[ConnectionTimeout] = None
#     messageTimeout: Optional[MessageTimeout] = None


# class FieldLinks11(BaseModel):
#     hasMetadata: Optional[HasMetadata10] = None


# class ModbusTcp(BaseModel):
#     connectionTimeout: Optional[str] = None
#     messageTimeout: Optional[str] = None
#     field_links: Optional[FieldLinks11] = Field(None, alias='_links')


# class Zigbee(BaseModel):
#     lqi: Optional[str] = None
#     rssi: Optional[str] = None
#     packetErrorRate: Optional[str] = None


# class Invert(Name):
#     pass


# class HasMetadata11(BaseModel):
#     invert: Optional[Invert] = None


# class FieldLinks12(BaseModel):
#     hasMetadata: Optional[HasMetadata11] = None


# class DigitalIO(BaseModel):
#     invert: Optional[bool] = None
#     field_links: Optional[FieldLinks12] = Field(None, alias='_links')


# class Port1(BaseModel):
#     type: # Optional[str] = None
#     name: Optional[str] = None
#     rank: Optional[str] = None
#     isMaster: Optional[str] = None
#     connectionStatus: Optional[str] = None
#     signalQuality: Optional[str] = None
#     address: Optional[str] = None
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks9] = Field(None, alias='_links')
#     modbusSerialLine: Optional[ModbusSerialLine] = None
#     modbusTcp: Optional[ModbusTcp] = None
#     zigbee: Optional[Zigbee] = None
#     digitalIO: Optional[DigitalIO] = None


# class Response1(BaseModel):
#     field_timeToLive: Optional[str] = Field(None, alias='_timeToLive')
#     devices: Optional[List[Device]] = None
#     field_id: Optional[str] = Field(None, alias='_id')
#     field_linksTimeToLive: Optional[str] = Field(None, alias='_linksTimeToLive')
#     name: Optional[str] = None
#     label: Optional[str] = None
#     healthState: Optional[str] = None
#     quality: Optional[str] = None
#     field_links: Optional[FieldLinks] = Field(None, alias='_links')
#     communication: Optional[Communication] = None
#     identification: Optional[Identification] = None
#     sensor: Optional[Sensor] = None
#     firmware: Optional[Firmware] = None
#     hardware: Optional[Hardware] = None
#     backup: Optional[Backup] = None
#     electrical: Optional[Electrical] = None
#     panel: Optional[Panel] = None
#     scheduling: Optional[Scheduling] = None
#     location: Optional[Location] = None
#     usages: Optional[List[Usage]] = None
#     type: # Optional[str] = None
#     port: Optional[Port1] = None


# class Service1(BaseModel):
#     reqType: Optional[str] = None
#     serviceUrl: Optional[str] = None
#     rank: Optional[int] = None
#     params: Optional[List[Param1]] = None
#     response: Optional[Response1] = None


# class PreCondition(Param):
#     pass


# class HasMetadata12(HasMetadata5):
#     pass


# class FieldLinks13(BaseModel):
#     hasMetadata: Optional[HasMetadata12] = None
#     hasDataPoints: Optional[List[HasDataPoint]] = None


# class Response2(BaseModel):
#     field_timeToLive: Optional[str] = Field(None, alias='_timeToLive')
#     devices: Optional[List[Device]] = None
#     usages: Optional[List[Usage]] = None
#     field_id: Optional[str] = Field(None, alias='_id')
#     field_linksTimeToLive: Optional[str] = Field(None, alias='_linksTimeToLive')
#     name: Optional[str] = None
#     type: # Optional[str] = None
#     rank: Optional[str] = None
#     field_links: Optional[FieldLinks13] = Field(None, alias='_links')


# class Load1(BaseModel):
#     name: Optional[str] = None
#     zone: Optional[str] = None
#     worksWhenPowerGreaterThan: Optional[str] = None


# class FieldLinks14(BaseModel):
#     LPHD1_InstallationFromBrk: Optional[LPHD1InstallationFromBrk] = None


# class Electrical1(BaseModel):
#     isIncomer: Optional[str] = None
#     ratedCurrent: Optional[str] = None
#     load: Optional[Load1] = None
#     field_links: Optional[FieldLinks14] = Field(None, alias='_links')
#     slot1Phase: Optional[str] = None
#     slot2Phase: Optional[str] = None
#     slot3Phase: Optional[str] = None
#     neutralVT: Optional[str] = None


# class Port2(BaseModel):
#     address: Optional[str] = None


# class RequestBody(BaseModel):
#     label: Optional[str] = None
#     electrical: Optional[Electrical1] = None
#     port: Optional[Port2] = None


# class Service(BaseModel):
#     reqType: Optional[str] = None
#     serviceUrl: Optional[str] = None
#     rank: Optional[int] = None
#     params: Optional[List[Param]] = None
#     preConditions: Optional[List[Param]] = None
#     response: Optional[dict] = None
#     requestBody: Optional[dict] = None


class Category(BaseModel):
    id: Optional[str] = None
    pdmShortNameIds: Optional[List[str]] = None
    read: Optional[Read] = None
    write: Optional[Write] = None


class ServiceMapping(BaseModel):
    commonDeviceAttributes: Optional[CommonDeviceAttributes] = None
    categories: Optional[List[Category]] = None
    alarms: Optional[List[Category]] = None


# class DependentResponseValue(BaseModel):
#     value: Optional[str] = None
#     rank: Optional[int] = None
#     path: Optional[str] = None


# class PossibleDerivedValue(BaseModel):
#     slot2Phase: Optional[str] = None
#     value: Optional[str] = None
#     slot1Phase: Optional[str] = None
#     slot3Phase: Optional[str] = None


class Attribute(BaseModel):
    value: Optional[str] = None
    rank: Optional[int] = None
    path: Optional[str] = None


# class PossibleDerivedValue1(BaseModel):
#     LPHD1_PowSupCfg: Optional[str] = None
#     LPHD1_PhsRot: Optional[str] = None
#     value: Optional[str] = None


class AdvancedSetting(BaseModel):
    pdmShortNameId: Optional[str] = None
    attribute: Optional[Attribute] = None
    dependentSettings: Optional[List] = None
    dependentResponseValues: Optional[List[Attribute]] = None
    possibleDerivedValues: Optional[List[Dict]] = None


# class Read(BaseModel):
#     id: Optional[str] = None
#     advancedSettings: Optional[List[AdvancedSetting]] = None


# class DictionaryConfig(BaseModel):
#     id: Optional[str] = None
#     advancedSettings: Optional[List[AdvancedSetting]] = None
class Read(BaseModel):
    protocol: Optional[str] = None
    services: Optional[List[Services]] = None
    id: Optional[str] = None
    advancedSettings: Optional[List[AdvancedSetting]] = None


class Write(BaseModel):
    protocol: Optional[str] = None
    services: Optional[List[Services]] = None
    id: Optional[str] = None
    advancedSettings: Optional[List[AdvancedSetting]] = None


class AdvancedSettingsConfig(BaseModel):
    read: Optional[List[Read]] = None
    write: Optional[List[Write]] = None


class Model(BaseModel):
    serviceMapping: Optional[ServiceMapping] = None
    advancedSettingsConfig: Optional[AdvancedSettingsConfig] = None
    dictionaryConfig: Optional[List[Dict]] = None


# from structures import *

# filepath = os.path.join('..', 'config', 'EMS59440_configurator.json')
# x = loadJsonFile(filepath)
# y = Model(**x)
# pass
class AppLiterals:
    CONFIG_FILE_PATH: str = "C:\\newDriverConfig.json"
    METADATA_FILE_PATH: str = "C:\\newDriverMetadata.json"
    META_DEVICE: str = "device"
    META_IMAGE_URL: str = "deviceImageUrl"
    META_IDENTIFICATION: str = "identification"
    META_CONFIGURATION: str = "configuration"
    META_EXTIDENTIFICATION: str = "extendedIdentification"
    META_COMMUNICATION: str = "communication"
    META_ISF4314SUPPORTED: str = "Is FC43/14 supported"
    ADVANCED_SETTING_VALUE: str = "value"
    GV_DEVICEID: str = "deviceId"
    GV_ELECTRICALDATAPOINT: str = "electricalDatapoint"
    GV_AMBIENTDATAPOINT: str = "ambientDatapoint"
    PROP_PDMSHORTNAMEID: str = "pdmShortNameId"
    PROP_USAGE_PDMID: str = "LPHD1_Usage"
    PROP_DATAPOINTID: str = "datapointID"
    PROP_USAGEID: str = "usageId"
    PROP_MOUNTING_POS: str = "LPHD1_InstallationFromBrk"
    PANEl_GATEWAY_TOKEN: str = "PanelGatewayToken"
    DeviceIdCode: int = 1
    ObjectId: int = 0
    GatewayProductCodeBufferIndex: int = 1
    GatewayBrandBufferIndex: int = 0
    GatewayFirmwareRevisionBufferIndex: int = 2
    ReadHoldingRegisters: str = "ReadHoldingRegisters"
    DeepScan: str = "DEEPSCAN"
    SerialNumber: str = "Serial_Number"
    MacAddress: str = "MacAddress"
    ProductModel: str = "Product_Model"
    ProductCode: str = "Commercial_Reference"


@dataclass
class WriteDeviceResponse:
    Success: bool
    Error: List[str]

    def WriteDeviceResponse(self):
        self.Success = not any(self.Error)


# from Services.structures import loadJsonFile
#
# data = loadJsonFile(r"C:\Users\SESA503669\PycharmProjects\DMTFLET\Downloaded_models\A9MEM1593\A9MEM1593_configurator.json")
# dataObj = Model(**data)
# # print(json.dumps(dataObj, indent=2))
# print(dataObj)
